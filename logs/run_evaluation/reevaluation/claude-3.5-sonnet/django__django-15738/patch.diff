--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -1473,7 +1473,32 @@
 
     def _generate_removed_altered_foo_together(self, operation):
         for (
             old_value,
             new_value,
             app_label,
             model_name,
             dependencies,
         ) in self._get_altered_foo_together_operations(operation.option_name):
             if operation == operations.AlterIndexTogether:
                 old_value = {
                     value
                     for value in old_value
                     if value
                     not in self.renamed_index_together_values[app_label, model_name]
                 }
-            removal_value = new_value.intersection(old_value)
+            # Check if any fields in old constraints are being removed or
+            # changed from concrete to m2m fields
+            old_model_name = self.renamed_models.get(
+                (app_label, model_name), model_name
+            )
+            old_model_state = self.from_state.models[app_label, old_model_name]
+            new_model_state = self.to_state.models[app_label, model_name]
+            
+            removed_or_altered_fields = set()
+            for field_tuple in old_value:
+                for field_name in field_tuple:
+                    if field_name not in new_model_state.fields:
+                        # Field was removed
+                        removed_or_altered_fields.add(field_tuple)
+                        break
+                    old_field = old_model_state.get_field(field_name)
+                    new_field = new_model_state.get_field(field_name)
+                    if not old_field.many_to_many and new_field.many_to_many:
+                        # Field changed from concrete to m2m
+                        removed_or_altered_fields.add(field_tuple)
+                        break
+            
+            # For constraints that contain removed/altered fields, we need to
+            # remove them entirely. For others, keep the intersection.
+            removal_value = new_value.intersection(old_value) | removed_or_altered_fields
+            
             if removal_value or old_value:
                 self.add_operation(
                     app_label,
                     operation(
                         name=model_name, **{operation.option_name: removal_value}
                     ),
                     dependencies=dependencies,
                 )
 
 