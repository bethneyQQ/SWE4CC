--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -115,40 +115,75 @@
             raise KeyError('Unknown media type "%s"' % name)
 
     @staticmethod
-    def merge(list_1, list_2):
+    def merge(*lists):
         """
         Merge two lists while trying to keep the relative order of the elements.
         Warn if the lists have the same two elements in a different relative
         order.
 
         For static assets it can be important to have them included in the DOM
         in a certain order. In JavaScript you may not be able to reference a
         global or in CSS you might want to override a style.
         """
-        # Start with a copy of list_1.
-        combined_list = list(list_1)
-        last_insert_index = len(list_1)
-        # Walk list_2 in reverse, inserting each element into combined_list if
-        # it doesn't already exist.
-        for path in reversed(list_2):
-            try:
-                # Does path already exist in the list?
-                index = combined_list.index(path)
-            except ValueError:
-                # Add path to combined_list since it doesn't exist.
-                combined_list.insert(last_insert_index, path)
-            else:
-                if index > last_insert_index:
-                    warnings.warn(
-                        'Detected duplicate Media files in an opposite order:\n'
-                        '%s\n%s' % (combined_list[last_insert_index], combined_list[index]),
-                        MediaOrderConflictWarning,
-                    )
-                # path already exists in the list. Update last_insert_index so
-                # that the following elements are inserted in front of this one.
-                last_insert_index = index
-        return combined_list
+        # Handle the common case of merging two lists
+        if len(lists) == 2:
+            list_1, list_2 = lists
+            # Start with a copy of list_1.
+            combined_list = list(list_1)
+            last_insert_index = len(list_1)
+            # Walk list_2 in reverse, inserting each element into combined_list if
+            # it doesn't already exist.
+            for path in reversed(list_2):
+                try:
+                    # Does path already exist in the list?
+                    index = combined_list.index(path)
+                except ValueError:
+                    # Add path to combined_list since it doesn't exist.
+                    combined_list.insert(last_insert_index, path)
+                else:
+                    if index > last_insert_index:
+                        warnings.warn(
+                            'Detected duplicate Media files in an opposite order:\n'
+                            '%s\n%s' % (combined_list[last_insert_index], combined_list[index]),
+                            MediaOrderConflictWarning,
+                        )
+                    # path already exists in the list. Update last_insert_index so
+                    # that the following elements are inserted in front of this one.
+                    last_insert_index = index
+            return combined_list
+        # For a single list or empty, return as-is
+        elif len(lists) == 1:
+            return list(lists[0])
+        elif len(lists) == 0:
+            return []
+        # For multiple lists, use a different strategy to avoid false conflicts
+        else:
+            # Collect ordering constraints from each list
+            order_constraints = []
+            for lst in lists:
+                for i in range(len(lst) - 1):
+                    order_constraints.append((lst[i], lst[i + 1]))
+            
+            # Get all unique items
+            all_items = []
+            seen = set()
+            for lst in lists:
+                for item in lst:
+                    if item not in seen:
+                        all_items.append(item)
+                        seen.add(item)
+            
+            # Build result respecting constraints
+            result = []
+            remaining = all_items[:]
+            
+            while remaining:
+                for item in remaining:
+                    # Check if item can be added (no constraint requires something else first)
+                    if not any(before == item and after in remaining for before, after in order_constraints):
+                        result.append(item)
+                        remaining.remove(item)
+                        break
+            
+            return result
 
     def __add__(self, other):
         combined = Media()
@@ -72,7 +107,12 @@
     @property
     def _js(self):
         js = self._js_lists[0]
-        # filter(None, ...) avoids calling merge() with empty lists.
-        for obj in filter(None, self._js_lists[1:]):
-            js = self.merge(js, obj)
+        # Merge all lists at once to avoid creating false ordering constraints
+        # from intermediate merges.
+        non_empty_lists = [lst for lst in self._js_lists if lst]
+        if len(non_empty_lists) == 0:
+            return []
+        elif len(non_empty_lists) == 1:
+            return list(non_empty_lists[0])
+        js = self.merge(*non_empty_lists)
         return js
 
 