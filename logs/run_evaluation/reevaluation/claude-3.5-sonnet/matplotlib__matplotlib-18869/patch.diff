--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -132,6 +132,45 @@ __bibtex__ = r"""@Article{Hunter:2007,
 
 def __getattr__(name):
     if name == "__version__":
         import setuptools_scm
         global __version__  # cache it.
         # Only shell out to a git subprocess if really needed, and not on a
         # shallow clone, such as those used by CI, as the latter would trigger
         # a warning from setuptools_scm.
         root = Path(__file__).resolve().parents[2]
         if (root / ".git").exists() and not (root / ".git/shallow").exists():
             __version__ = setuptools_scm.get_version(
                 root=root,
                 version_scheme="post-release",
                 local_scheme="node-and-date",
                 fallback_version=_version.version,
             )
         else:  # Get the version from the _version.py setuptools_scm file.
             __version__ = _version.version
         return __version__
+    elif name == "version_info":
+        if "__version__" not in globals():
+            # Trigger __version__ loading if not already loaded
+            _ = __getattr__("__version__")
+        global version_info  # cache it.
+        version_info = _parse_version_info(__version__)
+        return version_info
     raise AttributeError(f"module {__name__!r} has no attribute {name!r}")
 
 
+_VersionInfo = namedtuple("_VersionInfo", 
+                          "major, minor, micro, releaselevel, serial")
+
+
+def _parse_version_info(version_string):
+    """Parse a version string into a namedtuple version_info."""
+    # Use packaging to parse the version properly
+    v = parse_version(version_string)
+    # Extract base version parts (major, minor, micro)
+    major = minor = micro = 0
+    if hasattr(v, 'release') and v.release:
+        major = v.release[0] if len(v.release) > 0 else 0
+        minor = v.release[1] if len(v.release) > 1 else 0
+        micro = v.release[2] if len(v.release) > 2 else 0
+    
+    # Determine release level and serial
+    releaselevel = 'final'
+    serial = 0
+    
+    if hasattr(v, 'pre') and v.pre:
+        # Pre-release: alpha, beta, rc
+        releaselevel = {'a': 'alpha', 'b': 'beta', 'rc': 'candidate'}.get(
+            v.pre[0], v.pre[0])
+        serial = v.pre[1] if len(v.pre) > 1 else 0
+    elif hasattr(v, 'dev') and v.dev is not None:
+        releaselevel = 'dev'
+        serial = v.dev
+    elif hasattr(v, 'post') and v.post is not None:
+        releaselevel = 'final'
+        serial = v.post
+    
+    return _VersionInfo(major, minor, micro, releaselevel, serial)
+
+
 def _check_versions():
 
     # Quickfix to ensure Microsoft Visual C++ redistributable
 
 