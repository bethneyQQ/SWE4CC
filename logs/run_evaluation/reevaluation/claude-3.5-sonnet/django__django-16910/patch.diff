--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -772,16 +772,37 @@ class Query(BaseExpression):
     def _get_only_select_mask(self, opts, mask, select_mask=None):
         if select_mask is None:
             select_mask = {}
         select_mask[opts.pk] = {}
         # Only include fields mentioned in the mask.
         for field_name, field_mask in mask.items():
-            field = opts.get_field(field_name)
-            field_select_mask = select_mask.setdefault(field, {})
-            if field_mask:
-                if not field.is_relation:
-                    raise FieldError(next(iter(field_mask)))
-                related_model = field.remote_field.model._meta.concrete_model
-                self._get_only_select_mask(
-                    related_model._meta, field_mask, field_select_mask
-                )
+            try:
+                field = opts.get_field(field_name)
+                # Handle forward relations
+                if field.is_relation:
+                    field_select_mask = select_mask.setdefault(field, {})
+                    if field_mask:
+                        related_model = field.remote_field.model._meta.concrete_model
+                        self._get_only_select_mask(
+                            related_model._meta, field_mask, field_select_mask
+                        )
+                else:
+                    # Non-relation field
+                    select_mask.setdefault(field, {})
+            except FieldError:
+                # Must be a reverse relation
+                reverse_rel = opts.get_field(field_name)
+                # Skip virtual fields like many-to-many
+                if not hasattr(reverse_rel, "field"):
+                    continue
+                field = reverse_rel.field
+                field_select_mask = select_mask.setdefault(field, {})
+                if field_mask:
+                    if not field.is_relation:
+                        raise FieldError(next(iter(field_mask)))
+                    related_model = field.model._meta.concrete_model
+                    self._get_only_select_mask(
+                        related_model._meta, field_mask, field_select_mask
+                    )
         return select_mask
 
     def _get_defer_select_mask(self, opts, mask, select_mask=None):
 
 