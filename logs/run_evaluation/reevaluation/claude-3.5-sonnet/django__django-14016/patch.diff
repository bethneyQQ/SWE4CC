--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -38,7 +38,20 @@ class Q(tree.Node):
     conditional = True
 
     def __init__(self, *args, _connector=None, _negated=False, **kwargs):
-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
+        # Normalize kwargs values to ensure they're pickleable for deepcopy operations
+        normalized_kwargs = []
+        for key, value in sorted(kwargs.items()):
+            # Convert dict_keys, dict_values, and other non-pickleable iterables to lists
+            # Check if the value is a dict_keys, dict_values, or dict_items type
+            if type(value).__name__ in ('dict_keys', 'dict_values', 'dict_items'):
+                value = list(value)
+            # Also handle other view objects that might not be pickleable
+            elif hasattr(value, '__iter__') and not isinstance(value, (str, bytes, list, tuple)):
+                try:
+                    copy.deepcopy(value)
+                except (TypeError, AttributeError):
+                    value = list(value)
+            normalized_kwargs.append((key, value))
+        super().__init__(children=[*args, *normalized_kwargs], connector=_connector, negated=_negated)
 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
 
 