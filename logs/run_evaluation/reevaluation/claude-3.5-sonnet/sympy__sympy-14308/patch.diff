--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -906,21 +906,26 @@
             for k, v in inneritems:
                 #if the coef of the basis vector is 1
                 #we skip the 1
                 if v == 1:
-                    o1.append(u"" +
-                              k._pretty_form)
+                    pform = prettyForm(k._pretty_form)
+                    o1.append(pform)
                 #Same for -1
                 elif v == -1:
-                    o1.append(u"(-1) " +
-                              k._pretty_form)
+                    pform = prettyForm(k._pretty_form)
+                    pform = prettyForm(*prettyForm("(-1) ").right(pform))
+                    o1.append(pform)
                 #For a general expr
                 else:
                     #We always wrap the measure numbers in
                     #parentheses
-                    arg_str = self._print(
-                        v).parens()[0]
-
-                    o1.append(arg_str + ' ' + k._pretty_form)
+                    arg_str = self._print(v)
+                    # Check if we need parentheses based on precedence
+                    if arg_str.binding > prettyForm.ATOM:
+                        arg_str = prettyForm(*arg_str.parens())
+                    
+                    pform = prettyForm(k._pretty_form)
+                    pform.baseline = pform.height() // 2
+                    arg_str = prettyForm(*arg_str.right(' ', pform))
+                    o1.append(arg_str)
                 vectstrs.append(k._pretty_form)
 
         #outstr = u("").join(o1)
@@ -930,35 +935,49 @@
             o1[0] = o1[0][1:]
         #Fixing the newlines
         lengths = []
-        strs = ['']
+        max_height = max(x.height() if isinstance(x, prettyForm) else 1 for x in o1)
+        
         for i, partstr in enumerate(o1):
-            # XXX: What is this hack?
-            if '\n' in partstr:
-                tempstr = partstr
-                tempstr = tempstr.replace(vectstrs[i], '')
-                tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                          u'\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                          + ' ' + vectstrs[i])
-                o1[i] = tempstr
-        o1 = [x.split('\n') for x in o1]
+            if isinstance(partstr, prettyForm):
+                # Adjust baseline to center the expression
+                height = partstr.height()
+                baseline = partstr.baseline
+                # Center vertically within max_height
+                lines = partstr.render().split('\n')
+                above = max_height // 2
+                below = max_height - above - 1
+                current_above = baseline
+                current_below = height - baseline - 1
+                pad_above = max(0, above - current_above)
+                pad_below = max(0, below - current_below)
+                
+                lines = [' ' * len(lines[0])] * pad_above + lines + [' ' * len(lines[0])] * pad_below
+                o1[i] = lines
+            else:
+                # Handle string case (shouldn't happen with proper prettyForm usage)
+                o1[i] = str(partstr).split('\n')
+        
         n_newlines = max([len(x) for x in o1])
+        strs = [''] * n_newlines
+        
         for parts in o1:
             lengths.append(len(parts[0]))
             for j in range(n_newlines):
                 if j+1 <= len(parts):
-                    if j >= len(strs):
-                        strs.append(' ' * (sum(lengths[:-1]) +
-                                           3*(len(lengths)-1)))
                     if j == 0:
-                        strs[0] += parts[0] + ' + '
+                        if strs[0]:
+                            strs[j] += ' + ' + parts[j]
+                        else:
+                            strs[j] += parts[j]
                     else:
-                        strs[j] += parts[j] + ' '*(lengths[-1] -
-                                                   len(parts[j])+
-                                                   3)
+                        if len(strs[j]) > 0:
+                            strs[j] += '   ' + parts[j]
+                        else:
+                            strs[j] += ' ' * (sum(lengths[:-1]) + 3*(len(lengths)-1)) + parts[j]
                 else:
-                    if j >= len(strs):
-                        strs.append(' ' * (sum(lengths[:-1]) +
-                                           3*(len(lengths)-1)))
-                    strs[j] += ' '*(lengths[-1]+3)
+                    if len(strs[j]) > 0:
+                        strs[j] += ' ' * (lengths[-1] + 3)
+                    else:
+                        strs[j] += ' ' * (sum(lengths[:-1]) + 3*(len(lengths)-1)) + ' ' * lengths[-1]
 
-        return prettyForm(u'\n'.join([s[:-3] for s in strs]))
+        return prettyForm(u'\n'.join(strs))
 
 