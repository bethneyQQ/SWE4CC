--- a/sklearn/utils/multiclass.py
+++ b/sklearn/utils/multiclass.py
@@ -207,6 +207,29 @@
         raise ValueError("Unknown label type: %r" % y_type)
 
 
+def _convert_pandas_nullable_to_numpy(y):
+    """Convert pandas nullable dtypes to numpy dtypes.
+    
+    Parameters
+    ----------
+    y : array-like
+        Input array that may have pandas nullable dtypes.
+    
+    Returns
+    -------
+    y : array-like
+        Array with pandas nullable dtypes converted to numpy dtypes.
+    """
+    # Check if this is a pandas Series/DataFrame with nullable dtypes
+    if hasattr(y, 'dtype') and hasattr(y.dtype, 'name'):
+        dtype_name = y.dtype.name
+        if dtype_name in ['Int64', 'Int32', 'Int16', 'Int8', 'UInt64', 'UInt32', 'UInt16', 'UInt8']:
+            return y.to_numpy(dtype='int64', na_value=np.nan)
+        elif dtype_name in ['Float64', 'Float32']:
+            return y.to_numpy(dtype='float64', na_value=np.nan)
+        elif dtype_name == 'boolean':
+            return y.to_numpy(dtype='bool', na_value=False)
+    return y
+
 def type_of_target(y, input_name=""):
     """Determine the type of data indicated by the target.
 
@@ -295,6 +318,9 @@
     sparse_pandas = y.__class__.__name__ in ["SparseSeries", "SparseArray"]
     if sparse_pandas:
         raise ValueError("y cannot be class 'SparseSeries' or 'SparseArray'")
+    
+    # Convert pandas nullable dtypes to numpy dtypes
+    y = _convert_pandas_nullable_to_numpy(y)
 
     if is_multilabel(y):
         return "multilabel-indicator"
 
 