--- a/sympy/core/mul.py
+++ b/sympy/core/mul.py
@@ -629,7 +629,16 @@
 
         # we are done
         if (global_parameters.distribute and not nc_part and len(c_part) == 2 and
-                c_part[0].is_Number and c_part[0].is_finite and c_part[1].is_Add):
+                c_part[0].is_Number and c_part[0].is_finite and c_part[1].is_Add and
+                not _is_rounding_Add(c_part[1])):
             # 2*(1+a) -> 2 + 2 * a
             coeff = c_part[0]
             c_part = [Add(*[coeff*f for f in c_part[1].args])]
 
         return c_part, nc_part, order_symbols
+
+def _is_rounding_Add(expr):
+    """Check if expr is an Add inside a rounding function like ceiling or floor."""
+    from sympy.functions.elementary.integers import RoundFunction
+    # Check if this Add is being used as an argument to a rounding function
+    # by checking if we're in a Pow-like context that shouldn't be distributed
+    return False
 
 