--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -89,24 +89,36 @@
 def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
                       suppress_rtype: bool = False) -> None:
     arguments: Dict[str, Dict[str, bool]] = {}
     fields = cast(Iterable[nodes.field], node)
     for field in fields:
         field_name = field[0].astext()
         parts = re.split(' +', field_name)
         if parts[0] == 'param':
             if len(parts) == 2:
                 # :param xxx:
-                arg = arguments.setdefault(parts[1], {})
+                # Strip leading asterisks to get the actual parameter name
+                name = parts[1].lstrip('*')
+                arg = arguments.setdefault(name, {})
                 arg['param'] = True
             elif len(parts) > 2:
                 # :param xxx yyy:
                 name = ' '.join(parts[2:])
+                # Strip leading asterisks to get the actual parameter name
+                name = name.lstrip('*')
                 arg = arguments.setdefault(name, {})
                 arg['param'] = True
                 arg['type'] = True
         elif parts[0] == 'type':
             name = ' '.join(parts[1:])
+            # Strip leading asterisks to get the actual parameter name
+            name = name.lstrip('*')
             arg = arguments.setdefault(name, {})
             arg['type'] = True
         elif parts[0] == 'rtype':
             arguments['return'] = {'type': True}
 
     for name, annotation in annotations.items():
@@ -118,13 +130,13 @@
         if not arg.get('type'):
             field = nodes.field()
             field += nodes.field_name('', 'type ' + name)
             field += nodes.field_body('', nodes.paragraph('', annotation))
             node += field
         if not arg.get('param'):
             field = nodes.field()
             field += nodes.field_name('', 'param ' + name)
             field += nodes.field_body('', nodes.paragraph('', ''))
             node += field
 
     if 'return' in annotations and 'return' not in arguments:
@@ -146,20 +158,24 @@
     fields = cast(Iterable[nodes.field], node)
     has_description = set()  # type: Set[str]
     has_type = set()  # type: Set[str]
     for field in fields:
         field_name = field[0].astext()
         parts = re.split(' +', field_name)
         if parts[0] == 'param':
             if len(parts) == 2:
                 # :param xxx:
-                has_description.add(parts[1])
+                # Strip leading asterisks to get the actual parameter name
+                name = parts[1].lstrip('*')
+                has_description.add(name)
             elif len(parts) > 2:
                 # :param xxx yyy:
                 name = ' '.join(parts[2:])
+                # Strip leading asterisks to get the actual parameter name
+                name = name.lstrip('*')
                 has_description.add(name)
                 has_type.add(name)
         elif parts[0] == 'type':
             name = ' '.join(parts[1:])
+            # Strip leading asterisks to get the actual parameter name
+            name = name.lstrip('*')
             has_type.add(name)
         elif parts[0] in ('return', 'returns'):
             has_description.add('return')
 
 