--- a/src/_pytest/_code/source.py
+++ b/src/_pytest/_code/source.py
@@ -146,11 +146,22 @@ def deindent(lines: Iterable[str]) -> List[str]:
 def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[int]]:
     # Flatten all statements and except handlers into one lineno-list.
     # AST's line numbers start indexing at 1.
+    # In Python 3.9+, decorators have line numbers and we need to exclude them
+    # to avoid including decorator lines in the statement range.
     values: List[int] = []
+    decorator_lines: set = set()
+    
+    # Collect decorator line numbers to exclude them
+    for x in ast.walk(node):
+        if hasattr(x, "decorator_list"):
+            for decorator in x.decorator_list:
+                if hasattr(decorator, "lineno"):
+                    decorator_lines.add(decorator.lineno - 1)
+    
     for x in ast.walk(node):
         if isinstance(x, (ast.stmt, ast.ExceptHandler)):
-            values.append(x.lineno - 1)
+            if (x.lineno - 1) not in decorator_lines:
+                values.append(x.lineno - 1)
             for name in ("finalbody", "orelse"):
                 val: Optional[List[ast.stmt]] = getattr(x, name, None)
                 if val:
 
 