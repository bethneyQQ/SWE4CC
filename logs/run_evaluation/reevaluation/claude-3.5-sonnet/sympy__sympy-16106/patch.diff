--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -391,6 +391,30 @@ class MathMLContentPrinter(MathMLPrinterBase):
     _print_MatrixSymbol = _print_Symbol
     _print_RandomSymbol = _print_Symbol
 
+    def _print_IndexedBase(self, e):
+        """Print IndexedBase as a symbol"""
+        return self._print(e.label)
+
+    def _print_Indexed(self, e):
+        """Print Indexed as a subscripted element"""
+        x = self.dom.createElement('msub')
+        x_1 = self.dom.createElement('ci')
+        x_1.appendChild(self._print(e.base))
+        x.appendChild(x_1)
+        if len(e.indices) == 1:
+            x.appendChild(self._print(e.indices[0]))
+        else:
+            x_2 = self.dom.createElement('list')
+            for index in e.indices:
+                x_2.appendChild(self._print(index))
+            x.appendChild(x_2)
+        return x
+
+    def _print_Idx(self, e):
+        """Print Idx (index) as a symbol"""
+        x = self.dom.createElement('ci')
+        x.appendChild(self.dom.createTextNode(e.name))
+        return x
+
     def _print_Pow(self, e):
         # Here we use root instead of power if the exponent is the reciprocal of an integer
         if self._settings['root_notation'] and e.exp.is_Rational and e.exp.p == 1:
@@ -848,6 +872,26 @@ class MathMLPresentationPrinter(MathMLPrinterBase):
 
     _print_RandomSymbol = _print_Symbol
 
+    def _print_IndexedBase(self, e):
+        """Print IndexedBase as a symbol"""
+        return self._print(e.label)
+
+    def _print_Indexed(self, e):
+        """Print Indexed as a subscripted element"""
+        if len(e.indices) == 1:
+            x = self.dom.createElement('msub')
+            x.appendChild(self._print(e.base))
+            x.appendChild(self._print(e.indices[0]))
+            return x
+        else:
+            x = self.dom.createElement('msub')
+            x.appendChild(self._print(e.base))
+            mrow = self.dom.createElement('mrow')
+            for index in e.indices:
+                mrow.appendChild(self._print(index))
+            x.appendChild(mrow)
+            return x
+
     def _print_conjugate(self, expr):
         enc = self.dom.createElement('menclose')
         enc.setAttribute('notation', 'top')
 
 