--- a/sklearn/utils/multiclass.py
+++ b/sklearn/utils/multiclass.py
@@ -23,7 +23,11 @@ from ..utils._array_api import get_namespace
 def _unique_multiclass(y):
     xp, is_array_api = get_namespace(y)
     if hasattr(y, "__array__") or is_array_api:
-        return xp.unique_values(xp.asarray(y))
+        # Use to_numpy for pandas objects to handle nullable dtypes correctly
+        if hasattr(y, "to_numpy"):
+            return xp.unique_values(y.to_numpy())
+        else:
+            return xp.unique_values(xp.asarray(y))
     else:
         return set(y)
 
@@ -158,7 +162,12 @@ def is_multilabel(y):
         with warnings.catch_warnings():
             warnings.simplefilter("error", np.VisibleDeprecationWarning)
             try:
-                y = xp.asarray(y)
+                # Use to_numpy for pandas objects to handle nullable dtypes correctly
+                if hasattr(y, "to_numpy"):
+                    y = y.to_numpy()
+                else:
+                    y = xp.asarray(y)
             except (np.VisibleDeprecationWarning, ValueError):
                 # dtype=object should be provided explicitly for ragged arrays,
                 # see NEP 34
@@ -306,7 +315,12 @@ def type_of_target(y, input_name=""):
         warnings.simplefilter("error", np.VisibleDeprecationWarning)
         if not issparse(y):
             try:
-                y = xp.asarray(y)
+                # Use to_numpy for pandas objects to handle nullable dtypes correctly
+                if hasattr(y, "to_numpy"):
+                    y = y.to_numpy()
+                else:
+                    y = xp.asarray(y)
             except (np.VisibleDeprecationWarning, ValueError):
                 # dtype=object should be provided explicitly for ragged arrays,
                 # see NEP 34
 
 
 
