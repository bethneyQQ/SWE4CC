--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -130,6 +130,30 @@
 }"""
 
 
+def _parse_version_info(version_str):
+    """
+    Parse the version string into a namedtuple for easier version comparison.
+    
+    Returns a namedtuple similar to sys.version_info with fields:
+    major, minor, micro, releaselevel, serial
+    """
+    from packaging.version import parse as parse_version
+    from collections import namedtuple
+    
+    _VersionInfo = namedtuple('version_info', 
+                              'major, minor, micro, releaselevel, serial')
+    
+    parsed = parse_version(version_str)
+    # Handle both Version and LegacyVersion objects
+    major = parsed.major if hasattr(parsed, 'major') else 0
+    minor = parsed.minor if hasattr(parsed, 'minor') else 0
+    micro = parsed.micro if hasattr(parsed, 'micro') else 0
+    releaselevel = 'final'
+    serial = 0
+    
+    return _VersionInfo(major, minor, micro, releaselevel, serial)
+
+
 def __getattr__(name):
     if name == "__version__":
         import setuptools_scm
@@ -148,6 +172,9 @@
         else:  # Get the version from the _version.py setuptools_scm file.
             __version__ = _version.version
         return __version__
+    elif name == "__version_info__":
+        global __version_info__
+        __version_info__ = _parse_version_info(__version__)
+        return __version_info__
     raise AttributeError(f"module {__name__!r} has no attribute {name!r}")
 
 
 
 
