--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -989,7 +989,7 @@ def shell_command() -> None:
 @click.option(
     "--sort",
     "-s",
-    type=click.Choice(("endpoint", "methods", "rule", "match")),
+    type=click.Choice(("endpoint", "methods", "domain", "rule", "match")),
     default="endpoint",
     help=(
         'Method to sort routes by. "match" is the order that Flask will match '
@@ -1008,27 +1008,48 @@ def routes_command(sort: str, all_methods: bool) -> None:
 
     ignored_methods = set(() if all_methods else ("HEAD", "OPTIONS"))
 
-    if sort in ("endpoint", "rule"):
+    if sort in ("endpoint", "rule", "domain"):
         rules = sorted(rules, key=attrgetter(sort))
     elif sort == "methods":
         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore
 
+    # Calculate domain for each rule
+    server_name = current_app.config.get("SERVER_NAME") or ""
+    domains = []
+    for rule in rules:
+        if rule.host:
+            # If a specific host is set, use it
+            domain = rule.host
+        elif rule.subdomain:
+            # If subdomain is set, combine with server_name
+            if server_name:
+                domain = f"{rule.subdomain}.{server_name}"
+            else:
+                domain = rule.subdomain
+        else:
+            # No subdomain, use server_name or "-"
+            domain = server_name if server_name else "-"
+        domains.append(domain)
+
     rule_methods = [
         ", ".join(sorted(rule.methods - ignored_methods))  # type: ignore
         for rule in rules
     ]
 
-    headers = ("Endpoint", "Methods", "Rule")
+    headers = ("Domain", "Endpoint", "Methods", "Rule")
     widths = (
+        max(len(domain) for domain in domains),
         max(len(rule.endpoint) for rule in rules),
         max(len(methods) for methods in rule_methods),
         max(len(rule.rule) for rule in rules),
     )
     widths = [max(len(h), w) for h, w in zip(headers, widths)]
-    row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}".format(*widths)
+    row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}".format(*widths)
 
     click.echo(row.format(*headers).strip())
     click.echo(row.format(*("-" * width for width in widths)))
 
-    for rule, methods in zip(rules, rule_methods):
-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())
+    for rule, methods, domain in zip(rules, rule_methods, domains):
+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())
 
 
 
 
