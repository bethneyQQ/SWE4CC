--- a/sklearn/ensemble/iforest.py
+++ b/sklearn/ensemble/iforest.py
@@ -119,6 +119,10 @@
     verbose : int, optional (default=0)
         Controls the verbosity of the tree building process.
 
+    warm_start : bool, optional (default=False)
+        When set to ``True``, reuse the solution of the previous call to fit
+        and add more estimators to the ensemble, otherwise, just fit a whole
+        new forest. See :term:`the Glossary <warm_start>`.
 
     Attributes
     ----------
@@ -167,13 +171,15 @@
     def __init__(self,
                  n_estimators=100,
                  max_samples="auto",
                  contamination="legacy",
                  max_features=1.,
                  bootstrap=False,
                  n_jobs=None,
                  behaviour='old',
                  random_state=None,
-                 verbose=0):
+                 verbose=0,
+                 warm_start=False):
         super().__init__(
             base_estimator=ExtraTreeRegressor(
                 max_features=1,
                 splitter='random',
@@ -187,7 +193,8 @@
             max_samples=max_samples,
             max_features=max_features,
             n_jobs=n_jobs,
             random_state=random_state,
-            verbose=verbose)
+            verbose=verbose,
+            warm_start=warm_start)
 
         self.behaviour = behaviour
         self.contamination = contamination
--- a/sklearn/ensemble/tests/test_iforest.py
+++ b/sklearn/ensemble/tests/test_iforest.py
@@ -360,3 +360,21 @@
     test_iforest_works(contamination)
     assert mocked_get_chunk.call_count == n_predict_calls
 
+
+@pytest.mark.filterwarnings('ignore:default contamination')
+@pytest.mark.filterwarnings('ignore:behaviour="old"')
+def test_iforest_warm_start():
+    """Test that warm_start parameter works properly in IsolationForest."""
+    X = iris.data
+    clf = IsolationForest(n_estimators=10, warm_start=True, random_state=0)
+    clf.fit(X)
+    assert len(clf.estimators_) == 10
+    
+    # Add more estimators
+    clf.set_params(n_estimators=20)
+    clf.fit(X)
+    assert len(clf.estimators_) == 20
+    
+    # Verify predictions are consistent
+    y_pred = clf.predict(X)
+    assert y_pred.shape[0] == X.shape[0]
 
 
 
