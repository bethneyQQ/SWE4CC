--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -6,7 +6,7 @@ from __future__ import print_function, division
 
 import itertools
 
-from sympy.core import S, Add, Symbol, Mod
+from sympy.core import S, Add, Symbol, Mod, Rational
 from sympy.core.function import _coeff_isneg
 from sympy.core.sympify import SympifyError
 from sympy.core.alphabets import greeks
@@ -347,8 +347,8 @@ class LatexPrinter(Printer):
 
     def _print_Mul(self, expr):
         include_parens = False
-        if _coeff_isneg(expr):
-            expr = -expr
+        if _coeff_isneg(expr):
+            expr = -expr
             tex = "- "
             if expr.is_Add:
                 tex += "("
@@ -356,8 +356,39 @@ class LatexPrinter(Printer):
         else:
             tex = ""
 
-        from sympy.simplify import fraction
-        numer, denom = fraction(expr, exact=True)
+        from sympy.core.mul import Mul
+        from sympy.core.power import Pow
+
+        # Separate the expression into numerator and denominator parts
+        # using a structural approach (like the pretty printer) rather than
+        # algebraic simplification to maintain the expression form
+        if self.order not in ('old', 'none'):
+            args = expr.as_ordered_factors()
+        else:
+            args = Mul.make_args(expr)
+
+        # Gather terms for numerator/denominator
+        numer_factors = []
+        denom_factors = []
+        for item in args:
+            if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:
+                if item.exp != -1:
+                    denom_factors.append(Pow(item.base, -item.exp, evaluate=False))
+                else:
+                    denom_factors.append(Pow(item.base, -item.exp))
+            elif item.is_Rational and item is not S.Infinity:
+                if item.p != 1:
+                    numer_factors.append(Rational(item.p))
+                if item.q != 1:
+                    denom_factors.append(Rational(item.q))
+            else:
+                numer_factors.append(item)
+
+        # Rebuild numerator and denominator
+        numer = Mul(*numer_factors) if numer_factors else S.One
+        denom = Mul(*denom_factors) if denom_factors else S.One
+
         separator = self._settings['mul_symbol_latex']
         numbersep = self._settings['mul_symbol_latex_numbers']
 
@@ -391,47 +422,16 @@ class LatexPrinter(Printer):
                 return _tex
 
         if denom is S.One:
-            # use the original expression here, since fraction() may have
-            # altered it when producing numer and denom
-            tex += convert(expr)
+            tex += convert(numer)
         else:
             snumer = convert(numer)
             sdenom = convert(denom)
-            ldenom = len(sdenom.split())
-            ratio = self._settings['long_frac_ratio']
-            if self._settings['fold_short_frac'] \
-                    and ldenom <= 2 and not "^" in sdenom:
-                # handle short fractions
-                if self._needs_mul_brackets(numer, last=False):
-                    tex += r"\left(%s\right) / %s" % (snumer, sdenom)
-                else:
-                    tex += r"%s / %s" % (snumer, sdenom)
-            elif len(snumer.split()) > ratio*ldenom:
-                # handle long fractions
-                if self._needs_mul_brackets(numer, last=True):
-                    tex += r"\frac{1}{%s}%s\left(%s\right)" \
-                        % (sdenom, separator, snumer)
-                elif numer.is_Mul:
-                    # split a long numerator
-                    a = S.One
-                    b = S.One
-                    for x in numer.args:
-                        if self._needs_mul_brackets(x, last=False) or \
-                                len(convert(a*x).split()) > ratio*ldenom or \
-                                (b.is_commutative is x.is_commutative is False):
-                            b *= x
-                        else:
-                            a *= x
-                    if self._needs_mul_brackets(b, last=True):
-                        tex += r"\frac{%s}{%s}%s\left(%s\right)" \
-                            % (convert(a), sdenom, separator, convert(b))
-                    else:
-                        tex += r"\frac{%s}{%s}%s%s" \
-                            % (convert(a), sdenom, separator, convert(b))
-                else:
-                    tex += r"\frac{1}{%s}%s%s" % (sdenom, separator, snumer)
-            else:
-                tex += r"\frac{%s}{%s}" % (snumer, sdenom)
-
+            # Always use standard fraction form for consistency with pretty printer
+            tex += r"\frac{%s}{%s}" % (snumer, sdenom)
+
         if include_parens:
             tex += ")"
         return tex
 
 
 
