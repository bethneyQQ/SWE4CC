
--- a/src/_pytest/mark/evaluate.py
+++ b/src/_pytest/mark/evaluate.py
@@ -15,21 +15,6 @@
 from _pytest.store import StoreKey
 
 
-evalcache_key = StoreKey[Dict[str, Any]]()
-
-
-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:
-    default = {}  # type: Dict[str, object]
-    evalcache = config._store.setdefault(evalcache_key, default)
-    try:
-        return evalcache[expr]
-    except KeyError:
-        import _pytest._code
-
-        exprcode = _pytest._code.compile(expr, mode="eval")
-        evalcache[expr] = x = eval(exprcode, d)
-        return x
-
 
 class MarkEvaluator:
     def __init__(self, item: Item, name: str) -> None:
@@ -97,7 +82,9 @@
                 for expr in args:
                     self.expr = expr
                     if isinstance(expr, str):
+                        import _pytest._code
                         d = self._getglobals()
-                        result = cached_eval(self.item.config, expr, d)
+                        exprcode = _pytest._code.compile(expr, mode="eval")
+                        result = eval(exprcode, d)
                     else:
                         if "reason" not in mark.kwargs:
                             # XXX better be checked at collection time
