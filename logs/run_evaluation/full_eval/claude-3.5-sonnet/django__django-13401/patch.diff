
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -515,17 +515,32 @@
 
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            if self.creation_counter != other.creation_counter:
+                return False
+            # If creation_counter is the same, check if both have a model
+            # and if so, compare them
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                return self.model is other.model
+            # If neither has a model, they're equal (same creation_counter)
+            return not hasattr(self, 'model') and not hasattr(other, 'model')
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
+        # Order by creation_counter first to maintain existing ordering behavior,
+        # then by model to ensure consistent ordering for fields with the same
+        # creation_counter but different models.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # If creation_counter is the same, order by model
+            self_model = getattr(self, 'model', None)
+            other_model = getattr(other, 'model', None)
+            # Use id() for consistent ordering when models differ
+            return id(self_model) < id(other_model)
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        return hash((self.creation_counter, id(getattr(self, 'model', None))))
 
     def __deepcopy__(self, memodict):
