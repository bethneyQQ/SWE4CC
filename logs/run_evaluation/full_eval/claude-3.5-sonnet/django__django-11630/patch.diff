
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -3,13 +3,14 @@ import types
 from collections import defaultdict
 from itertools import chain
 
 from django.apps import apps
 from django.core.checks import Error, Tags, register
+from django.db import router
 
 
 @register(Tags.models)
 def check_all_models(app_configs=None, **kwargs):
-    db_table_models = defaultdict(list)
+    db_table_models = defaultdict(lambda: defaultdict(list))
     indexes = defaultdict(list)
     constraints = defaultdict(list)
     errors = []
@@ -19,7 +20,11 @@ def check_all_models(app_configs=None, **kwargs):
         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)
     for model in models:
         if model._meta.managed and not model._meta.proxy:
-            db_table_models[model._meta.db_table].append(model._meta.label)
+            # Group models by both db_table and the database they use
+            # to allow the same table name in different databases
+            for db in router.routers and list(router._router_func(model, 'db_for_write')) or ['default']:
+                db_table_models[db][model._meta.db_table].append(model._meta.label)
+                break
         if not inspect.ismethod(model.check):
             errors.append(
                 Error(
@@ -35,13 +40,15 @@ def check_all_models(app_configs=None, **kwargs):
             indexes[model_index.name].append(model._meta.label)
         for model_constraint in model._meta.constraints:
             constraints[model_constraint.name].append(model._meta.label)
-    for db_table, model_labels in db_table_models.items():
-        if len(model_labels) != 1:
-            errors.append(
-                Error(
-                    "db_table '%s' is used by multiple models: %s."
-                    % (db_table, ', '.join(db_table_models[db_table])),
-                    obj=db_table,
-                    id='models.E028',
+    for db, db_tables in db_table_models.items():
+        for db_table, model_labels in db_tables.items():
+            if len(model_labels) != 1:
+                errors.append(
+                    Error(
+                        "db_table '%s' is used by multiple models: %s."
+                        % (db_table, ', '.join(model_labels)),
+                        obj=db_table,
+                        id='models.E028',
+                    )
                 )
-            )
     for index_name, model_labels in indexes.items():
