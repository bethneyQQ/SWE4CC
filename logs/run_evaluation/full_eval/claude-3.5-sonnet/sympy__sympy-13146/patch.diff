
--- a/sympy/core/power.py
+++ b/sympy/core/power.py
@@ -1,6 +1,7 @@
 from __future__ import print_function, division
 
 from .sympify import _sympify
+from .numbers import Float, Rational
 from .cache import cacheit
 from .singleton import S
 from .expr import Expr
@@ -234,6 +235,17 @@ class Pow(Expr):
             return Mul(b, Pow(b, Add(e, S(-1))))
         
         # evaluate if both base and exponent are numbers
+        
+        # Normalize float exponents to rationals when possible
+        # This prevents issues where x**2.5 and x**(5/2) are treated as different
+        if isinstance(e, Float):
+            rational = nsimplify(e, rational=True)
+            if rational.is_Rational and abs(float(rational) - float(e)) < 1e-10:
+                e = rational
+        elif e.is_Number and not e.is_Rational and not e.is_Integer:
+            rational = nsimplify(e, rational=True)
+            if rational.is_Rational and abs(e - rational) < S(1)/10**10:
+                e = rational
         
         if e.is_Number:
             if e is S.NaN:
