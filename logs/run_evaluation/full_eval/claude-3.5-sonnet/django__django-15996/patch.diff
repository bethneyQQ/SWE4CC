
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -123,11 +123,28 @@
 
 class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        return (
-            "%s.%s[%r]" % (module, enum_class.__qualname__, self.value.name),
-            {"import %s" % module},
-        )
+        
+        # Check if this is a single enum value or a combination of flags
+        if self.value.name is not None:
+            # Single enum value
+            return (
+                "%s.%s[%r]" % (module, enum_class.__qualname__, self.value.name),
+                {"import %s" % module},
+            )
+        else:
+            # Combination of flags - decompose and create OR expression
+            # Use enum._decompose to get individual flag components
+            decomposed = enum._decompose(enum_class, self.value)[0]
+            if decomposed:
+                # Create an OR expression with the individual flags
+                parts = [
+                    "%s.%s.%s" % (module, enum_class.__qualname__, flag.name)
+                    for flag in decomposed
+                ]
+                return " | ".join(parts), {"import %s" % module}
+            else:
+                # Fallback to repr if decomposition fails
+                return repr(self.value), {"import %s" % module}
 
 
 class FloatSerializer(BaseSimpleSerializer):
