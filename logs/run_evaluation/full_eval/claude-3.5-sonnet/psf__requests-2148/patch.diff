
--- a/requests/models.py
+++ b/requests/models.py
@@ -10,6 +10,7 @@
 import collections
 import datetime
 
+from io import BytesIO, UnsupportedOperation
 from io import BytesIO, UnsupportedOperation
 from .hooks import default_hooks
 from .structures import CaseInsensitiveDict
@@ -22,7 +23,7 @@
 from .packages.urllib3.exceptions import DecodeError
 from .exceptions import (
     HTTPError, RequestException, MissingSchema, InvalidURL,
-    ChunkedEncodingError, ContentDecodingError)
+    ChunkedEncodingError, ContentDecodingError, ConnectionError)
 from .utils import (
     guess_filename, get_auth_from_url, requote_uri,
     stream_decode_response_unicode, to_key_val_list, parse_header_links,
@@ -30,6 +31,7 @@
 from .compat import (
     cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,
     is_py2, chardet, json, builtin_str, basestring, IncompleteRead)
+import socket
 from .status_codes import codes
 
 #: The set of HTTP status codes that indicate an automatically
@@ -632,15 +634,19 @@
         """
         def generate():
             try:
-                # Special case for urllib3.
                 try:
-                    for chunk in self.raw.stream(chunk_size, decode_content=True):
-                        yield chunk
-                except IncompleteRead as e:
-                    raise ChunkedEncodingError(e)
-                except DecodeError as e:
-                    raise ContentDecodingError(e)
-            except AttributeError:
+                    # Special case for urllib3.
+                    try:
+                        for chunk in self.raw.stream(chunk_size, decode_content=True):
+                            yield chunk
+                    except IncompleteRead as e:
+                        raise ChunkedEncodingError(e)
+                    except DecodeError as e:
+                        raise ContentDecodingError(e)
+                    except socket.error as e:
+                        raise ConnectionError(e)
+                except AttributeError:
+                    pass
                 # Standard file-like object.
                 while True:
                     chunk = self.raw.read(chunk_size)
