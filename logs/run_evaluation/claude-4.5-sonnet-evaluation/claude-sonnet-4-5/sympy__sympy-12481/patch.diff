--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -895,12 +895,14 @@
         # counting starts from 1.
 
         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
+        if not is_cycle:
+            # For cycle notation, we allow repeated elements (non-disjoint cycles)
+            # and apply them left-to-right. For array notation, duplicates are an error.
+            if has_dups(temp):
+                raise ValueError('there were repeated elements.')
+        elif has_dups(flatten([list(range(len(c))) for c in args if c])):
+            # Check for duplicate within individual cycles (e.g., [0,1,1])
+            raise ValueError('there were repeated elements within a cycle.')
         temp = set(temp)
 
         if not is_cycle and \
 
 
