--- a/django/core/management/commands/sqlmigrate.py
+++ b/django/core/management/commands/sqlmigrate.py
@@ -59,7 +59,7 @@
         plan = [(executor.loader.graph.nodes[targets[0]], options["backwards"])]
         sql_statements = executor.collect_sql(plan)
         if not sql_statements and options["verbosity"] >= 1:
             self.stderr.write("No operations found.")
-        self.output_transaction = migration.atomic
+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl
 
         return "\n".join(sql_statements)
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -1698,6 +1698,28 @@
             index = out.index("-- non-atomic operation")
             self.assertNotIn("BEGIN;", out[:index])
 
+    @override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations"})
+    def test_sqlmigrate_no_transactional_ddl(self):
+        """
+        sqlmigrate doesn't wrap output in BEGIN/COMMIT if the database
+        doesn't support transactional DDL.
+        """
+        out = io.StringIO()
+        with mock.patch.object(
+            connection.features, "can_rollback_ddl", False
+        ):
+            call_command(
+                "sqlmigrate",
+                "migrations",
+                "0001",
+                stdout=out,
+            )
+        output = out.getvalue().lower()
+        # No transaction wrapping for databases that don't support
+        # transactional DDL.
+        self.assertNotIn("begin;", output)
+        self.assertNotIn("commit;", output)
+
     @override_settings(
         INSTALLED_APPS=[
             "migrations.migrations_test_apps.unmigrated_app_simple",
 ```
