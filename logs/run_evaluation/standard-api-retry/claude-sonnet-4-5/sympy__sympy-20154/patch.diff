--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -1742,7 +1742,7 @@
     [1, 1, 1]
     [2, 1]
     [3]
-    
+
     Note that the _same_ dictionary object is returned each time.
     This is for speed:  generating each partition goes quickly,
     copying it after generation (which is necessary to save it)
@@ -1751,7 +1751,7 @@
     >>> [p for p in partitions(6, k=2)]
     [{1: 6}, {1: 6}, {1: 6}, {1: 6}]
 
-    If you want to build a list of the returned dictionaries then
+    The dictionary is now copied before yielding, so
     make a copy of them:
 
     >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP
@@ -1820,7 +1820,7 @@
         keys.append(r)
         room = m - q - bool(r)
         if size == k:
-            yield ms
+            yield ms.copy()
         else:
             for ms in partition_visitor(state, k):
                 yield ms
@@ -1833,7 +1833,7 @@
             if not keys:
                 break
         room += need
-        yield ms
+        yield ms.copy()
 
     # The main program. Initialize the partition with the all 1's and
     # setup the stack with the partition, its keys, and the remaining
@@ -1843,7 +1843,7 @@
     keys = [1]
     room = m - q - bool(r)
     if size == 1:
-        yield ms
+        yield ms.copy()
         return
 
     while True:
 ```
