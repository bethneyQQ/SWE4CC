--- a/sympy/simplify/cse_main.py
+++ b/sympy/simplify/cse_main.py
@@ -7,6 +7,7 @@
 from sympy.core.singleton import S
 from sympy.core.function import _coeff_isneg
 from sympy.core.exprtools import factor_terms
+from sympy.matrices.expressions import MatrixSymbol
 from sympy.utilities.iterables import numbered_symbols, \
     sift, topological_sort, ordered
 
@@ -451,7 +452,8 @@
     # Ignore Derivative by default to avoid infinite recursion
     excluded_symbols = set().union(*[item.atoms(Symbol, Derivative)
                                       for item in reduced_exprs])
-    excluded_symbols |= opt_subs.keys()
+    # Also exclude MatrixSymbol instances from substitution
+    excluded_symbols |= set([s for s in excluded_symbols if isinstance(s, MatrixSymbol)])
 
     # Find other optimization opportunities.
     opt_subs = opt_cse(reduced_exprs, order)
@@ -673,7 +675,10 @@
         if isinstance(expr, (Matrix, ImmutableMatrix)):
             temp.append(Tuple(*expr.flat()))
         elif isinstance(expr, (SparseMatrix, ImmutableSparseMatrix)):
-            temp.append(Tuple(*[expr[i] for i in expr._smat]))
+            temp.append(Tuple(*[expr[i] for i in expr._smat]))
+        elif isinstance(expr, MatrixSymbol):
+            # MatrixSymbol should be treated as atomic, don't recurse into it
+            return expr
         else:
             temp.append(expr)
     return expr.func(*temp)
 ```
--- a/sympy/simplify/cse_main.py
+++ b/sympy/simplify/cse_main.py
@@ -7,6 +7,7 @@
 from sympy.core.singleton import S
 from sympy.core.function import _coeff_isneg
 from sympy.core.exprtools import factor_terms
+from sympy.matrices.expressions import MatrixSymbol
 from sympy.utilities.iterables import numbered_symbols, \
     sift, topological_sort, ordered
 
@@ -490,6 +491,10 @@
     if isinstance(expr, Basic):
         if expr.is_Atom or expr.is_Order:
             return expr
+        # MatrixSymbol should be treated as atomic - don't extract it as CSE
+        # but allow processing of expressions that contain indexed MatrixSymbols
+        if isinstance(expr, MatrixSymbol):
+            return expr
 
         if iterable(expr):
             new_args = [_rebuild(arg) for arg in expr]
 
 ```
