--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1285,11 +1285,11 @@
         if pos < 0:
             pos = self.cols + pos
         if pos < 0:
             pos = 0
         elif pos > self.cols:
             pos = self.cols
 
-        cols = self.cols
+        rows = self.rows
 
         def entry(i, j):
             if j < pos:
                 return self[i, j]
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
             else:
-                return self[i, j - other.cols]
+                return self[i, j - other.cols]
 
-        return self._new(self.rows, self.cols + other.cols,
-                         lambda i, j: entry(i, j))
+        return self._new(rows, self.cols + other.cols,
+                         lambda i, j: entry(i, j))
 ```
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1280,17 +1280,17 @@
     def col_insert(self, pos, other):
         """Insert one or more columns at the given column position.
 
         Examples
         ========
 
         >>> from sympy import zeros, ones
         >>> M = zeros(3)
         >>> V = ones(3, 1)
         >>> M.col_insert(1, V)
         Matrix([
         [0, 1, 0, 0],
         [0, 1, 0, 0],
         [0, 1, 0, 0]])
 
         See Also
         ========
@@ -1298,20 +1298,20 @@
         row_insert
         """
         # Allows you to build a matrix even if it is null matrix
         if not self:
             return type(self)(other)
 
         if pos < 0:
             pos = self.cols + pos
         if pos < 0:
             pos = 0
         elif pos > self.cols:
             pos = self.cols
 
         cols = self.cols
 
         def entry(i, j):
             if j < pos:
                 return self[i, j]
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
             else:
-                return self[i, j - other.cols]
+                return self[i, pos + (j - pos - other.cols)]
 
         return self._new(self.rows, self.cols + other.cols,
                          lambda i, j: entry(i, j))
 ```
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1313,7 +1313,7 @@
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
             else:
-                return self[i, j - other.cols]
+                return self[i, pos + j - pos - other.cols]
 
         return self._new(self.rows, self.cols + other.cols,
                          lambda i, j: entry(i, j))
 ```
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1313,7 +1313,7 @@
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
             else:
-                return self[i, j - other.cols]
+                return self[i, pos + (j - pos - other.cols)]
 
         return self._new(self.rows, self.cols + other.cols,
                          lambda i, j: entry(i, j))
 ```
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1298,20 +1298,17 @@
         row_insert
         """
         # Allows you to build a matrix even if it is null matrix
         if not self:
             return type(self)(other)
 
         if pos < 0:
             pos = self.cols + pos
         if pos < 0:
             pos = 0
         elif pos > self.cols:
             pos = self.cols
 
-        cols = self.cols
-
         def entry(i, j):
             if j < pos:
                 return self[i, j]
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
             else:
-                return self[i, j - other.cols]
+                return self[i, pos + j - pos - other.cols]
 
         return self._new(self.rows, self.cols + other.cols,
                          lambda i, j: entry(i, j))
 ```
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1313,7 +1313,7 @@
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
             else:
-                return self[i, j - other.cols]
+                return self[i, pos + j - (pos + other.cols)]
 
         return self._new(self.rows, self.cols + other.cols,
                          lambda i, j: entry(i, j))
 ```
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1313,7 +1313,7 @@
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
             else:
-                return self[i, j - other.cols]
+                return self[i, pos + (j - pos - other.cols)]
 
         return self._new(self.rows, self.cols + other.cols,
                          lambda i, j: entry(i, j))
 ```
