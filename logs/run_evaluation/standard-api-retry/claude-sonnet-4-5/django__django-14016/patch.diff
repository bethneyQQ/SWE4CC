--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -38,6 +38,23 @@
     def __init__(self, *args, _connector=None, _negated=False, **kwargs):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
+    def __deepcopy__(self, memodict):
+        """
+        Deep copy the Q object, converting non-pickleable types to pickleable ones.
+        """
+        obj = self.__class__.__new__(self.__class__)
+        obj.connector = self.connector
+        obj.negated = self.negated
+        obj.children = []
+        for child in self.children:
+            if isinstance(child, tuple):
+                key, value = child
+                # Convert non-pickleable dict views to lists
+                if type(value).__name__ in ('dict_keys', 'dict_values', 'dict_items'):
+                    value = list(value)
+                obj.children.append((key, copy.deepcopy(value, memodict)))
+            else:
+                obj.children.append(copy.deepcopy(child, memodict))
+        return obj
+ 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
             raise TypeError(other)
 ```
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -1,6 +1,7 @@
 """
 Various data structures used in query construction.
 """
+import copy
 import functools
 import inspect
 from collections import namedtuple
@@ -38,6 +39,24 @@
     def __init__(self, *args, _connector=None, _negated=False, **kwargs):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
+    def __deepcopy__(self, memodict):
+        """
+        Deep copy the Q object, converting non-pickleable types to pickleable ones.
+        """
+        obj = self.__class__.__new__(self.__class__)
+        obj.connector = self.connector
+        obj.negated = self.negated
+        obj.children = []
+        for child in self.children:
+            if isinstance(child, tuple):
+                key, value = child
+                # Convert non-pickleable dict views to lists
+                if type(value).__name__ in ('dict_keys', 'dict_values', 'dict_items'):
+                    value = list(value)
+                obj.children.append((key, copy.deepcopy(value, memodict)))
+            else:
+                obj.children.append(copy.deepcopy(child, memodict))
+        return obj
+
     def _combine(self, other, conn):
         if not isinstance(other, Q):
             raise TypeError(other)
 ```
